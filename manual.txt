# TagPrediction

This is a tag prediction software which implements multiple ML algorithms using Bag of Words and TF-IDF to train data.
This Code is compatible with Python 2.7 and Linux. 

The source code folder contains both the program (folder name: Code) as well as the directory structure (folder name: Data) required to run it.

The current source code is tuned to run in minimal time by reducing the parameter values for each model. 
To run the complete program, please follow the comment/uncomment mentions in individual files. More details in the "Time taken" section of this file.

The original graphs for 18 SVM models trained with PCA and k-fold cross validation are attached in the Generated_Plots folder.

*****************************************************************************************************************************************************

Prerequisites:

pip install sklearn
pip install scipy
pip install pandas
pip install numpy
pip install nltk
pip install BeautifulSoup4
sudo apt-get install python-matplotlib
Go to your python prompt and run nltk.download()

***************************************************************************************************************************************************

Modify nltk’s tokenize file treebank.py to remove ‘#’ and add ‘=’ to the regex of delimiters.
In line 60:
#punctuation
   PUNCTUATION = [
       (re.compile(r'([:,])([^\d])'), r' \1 \2'),
       (re.compile(r'([:,])$'), r' \1 '),
       (re.compile(r'\.\.\.'), r' ... '),
       
       (re.compile(r'[;@=$%&]'), r' \g<0> '),
       
       (re.compile(r'([^\.])(\.)([\]\)}>"\']*)\s*$'), r'\1 \2\3 '),
       (re.compile(r'[?!]'), r' \g<0> '),
       (re.compile(r"([^'])' "), r"\1 ' "),
   ]
****************************************************************************************************************************************************

Run
run ./tagPrediction.sh

****************************************************************************************************************************************************

Plots:
1. Naive Bayes: 
Data used to generate the plot in MultinomialNB and BernoulliNB is present in plot_scripts/NB.
To generate the following at gnuplot command prompt - 

load "plot.dem"

2. SVM:
Plots are generated on the fly on running svm_pca.py. They get saved to Data/Plots and further into respective folder - Visualize or SVM

3. Random Forest:
Plots for multivariate and single variate error mappings are generated on the fly while running decision_tree.py. These get stored in Data/Plots/RF
Plots for single variate one-vs-all classifier can be generated by moving to the directory plot_scripts/random_forest and running the following at gnuplot command prompt - 

load "plotn.dem"

***************************************************************************************************************************************************

Time taken to run the program: 30 min
Following is the sequence of events:
0. Data processing.
This is commented in tagPrediction.sh. To run data processing, uncomment as per the script.

1. SVM with PCA and k-fold cross validation- It takes about 9 minutes per model. This part of submission takes 9 minutes as it is enabled for one model by default.


2. Random Forest - Each feature selection model takes 2 min. The tuned code runs these models for only one value of estimators.
Each single variate model takes 20 mins to run for a single feature selection.

3. Naive Bayes - Current code runs naive bayes for only one entry which is very quick.

For each of the above models, the noted code in the files can be commented/uncommented to run the full version.

4. Naive Bayes - BernoulliNB and MultinomialNB - This is instantaneous in full fledged mode.
